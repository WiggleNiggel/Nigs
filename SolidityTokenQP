// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

/*
       REQUIREMENTS
    1. Your contract will have public variables that store the details about your coin (Token Name, Token Abbrv., Total Supply)
    2. Your contract will have a mapping of addresses to balances (address => uint)
    3. You will have a mint function that takes two parameters: an address and a value. 
       The function then increases the total supply by that number and increases the balance 
       of the “sender” address by that amount
    4. Your contract will have a burn function, which works the opposite of the mint function, as it will destroy tokens. 
       It will take an address and value just like the mint functions. It will then deduct the value from the total supply 
       and from the balance of the “sender”.
    5. Lastly, your burn function should have conditionals to make sure the balance of "sender" is greater than or equal 
       to the amount that is supposed to be burned.

## Usage
1. **Token Name:** The name of the token is "QuantumPoints".
2. **Token Abbreviation:** The abbreviation for the token is "QP".
3. **Total Supply:** The initial total supply of tokens is set to 0 and can be increased through minting.
4. **Mint Function:** The `mint` function allows the contract owner to create new tokens and assign them to a specific address.
    - Parameters: `_address` (address to mint tokens to), `_value` (amount of tokens to mint).
5. **Burn Function:** The `burn` function enables the contract owner to destroy tokens held by a specific address.
    - Parameters: `_address` (address to burn tokens from), `_value` (amount of tokens to burn).

## Getting Started
To deploy and interact with this contract:
1. Deploy the contract on an Ethereum-compatible blockchain using a development environment like Remix or Truffle.
2. Use Ethereum wallets or custom scripts to interact with the deployed contract, calling the `mint` and `burn` functions as needed.

## License
This contract is licensed under the MIT License. You are free to use, modify, and distribute it according to the terms of the license.

## Disclaimer
This contract is provided as-is and may not be suitable for production use without further customization and auditing. Use it at your own risk.

*/

contract MyToken {

    // public variables here
    string public tokenName = "QuantumPoints";
    string public tokenAbbrv = "QP";
    uint public totalSupply = 0; 

    // mapping variable here
    mapping (address => uint) public balances;

    // mint function
    function mint(address _address, uint _value) public {
        totalSupply += _value;
        balances[_address] += _value;
    }

    // burn function
    function burn(address _address, uint _value) public {
        if (balances[_address] >= _value) {
            totalSupply -= _value;
            balances[_address] -= _value;
        }
    }
}

